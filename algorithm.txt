Algorithm:
Input: Number of queens (n), in this case, 8
Output: Arrangement of queens on the chessboard.
Step 1: Create a bisat class with functions to solve the puzzle recursively.
Step 2: Create a qsub function that tries to place a queen in each row of the current column.
Step 3: Check if the queen can be placed in the given box marked by board[i][col].
Step 4: If yes, place the queen in the box and recursively call qsub function for the remaining columns.
Step 5: If a solution is found, return true.
Step 6: If placing the queen in board[i][col] doesn't lead to a solution, then remove the queen from the box (backtrack).
Step 7: If the queen cannot be placed in any row in col, return false.
Step 8: Create a qmain function that creates an empty chessboard and calls qsub function to solve the puzzle.
Step 9: If a solution is found, call the printboard function to display the solution.
Step 10: If a solution is not found, print an error message and return false.
Step 11: Create a printboard function to display the solution.
Step 12: Create a main function that creates an instance of the bisat class and calls its qmain function to solve the puzzle.